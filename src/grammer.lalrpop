use lalrpop_util::ParseError;
use presburger::types::{Integer, Rational};
use presburger::ast::{Atom, Formula, Term, Var};

grammar;

////////////////////////////////////////////////////////////
// Arithmetic Expressions
//
// relation = sum rel_op sum
//
// sum = monomial "+" sum | monomial
// monomimal = constant "*" variable | constant
//
// constant = "(" constant ")" | rational
// rational = fraction | int
// fraction = int_literal "/" int_literal
// int = <s:r"-?[0-9]+">
//
// var = "(" var ")" | var_name
// var_name = <s:r"[a-z][a-zA-Z0-9]*">
//
// rel_op = "=" | "<="
//
////////////////////////////////////////////////////////////

/// Bare Integer literal
Int: Integer = <s:r"-?[0-9]+"> =>?
    Integer::from_str_radix(s, 10).map_err(
        |_| ParseError::User { error: "failed to parse integer" }
        // can't do this, the error message has to be `&'static str`
        // |e| ParseError::User { error: format!("Cannot parse {}. Original error: {}.", s, e) }
    );

/// Integer fraction
Fraction: Rational = <n: Int> "/" <d: Int> => Rational::from_parts_signed(n, d);

Rat: Rational = {
    <x:Int> => Rational::from(x),
    <x:Fraction> => x,
}

Constant: Rational = { "(" <c:Constant> ")" => c, <r:Rat> => r }

/// Valid arithmetic variable names start with a __lowercase__ letter
VarName: String = <s:r"[a-z][a-zA-Z0-9]*"> => String::from(s);
Var: Var = { "(" <v:Var> ")" => v, <n:VarName> => Var(n), }

/// Monomial
Monomial: Term = {
    <c:Constant> "*" <v:Var> => Term::ScalarVar(c, v),
    <c:Constant> => Term::Num(c),
    <v:Var> => Term::ScalarVar(Rational::from(1), v),
};

/// Sum of linear monomials
pub Sum: Term  = {
    // Atomic terms may only be added. There is no subtraction.
    // Note: this produces a right biased Term tree
    <m:Monomial> "+" <s:Sum> => Term::Add(Box::new(m), Box::new(s)),
    <m:Monomial> => m,
}


////////////////////////////////////////////////////////////
// Formulas
//
// The grammer is built so that the logical connectives bind in order from
// highest to lowest precedence:
//
// ~, /\, \/, ==>, <=>
//
////////////////////////////////////////////////////////////

/// valid logical variable names are uppercase
LogicalVar: Var = <s:r"[A-Z][A-Z0-9]*"> => Var(String::from(s));

/// Logical atoms
pub Atom: Atom = {
    "@T" => Atom::TruthValue(true),
    "@F" => Atom::TruthValue(false),
    <v:LogicalVar> => Atom::LogicalVar(v),
    <t1:Sum> "=" <t2:Sum> => Atom::Equality(Box::new(t1), Box::new(t2)),
    <t1:Sum> "<=" <t2:Sum> => Atom::LessEq(Box::new(t1), Box::new(t2)),
}

pub Formula: Formula = {
    "exists" <v:Var> "." <p:Formula> => Formula::Exists(v, Box::new(p)),
    "forall" <v:Var> "." <p:Formula> => Formula::Forall(v, Box::new(p)),
    <p:L5Formula> => p,
}

// Associates to the right
L5Formula: Formula = {
    <p:L4Formula> "<=>" <q:L5Formula> => Formula::Iff(Box::new(p), Box::new(q)),
    <p:L4Formula> => p,
}

// Associates to the right
L4Formula: Formula = {
    <p:L3Formula> "==>" <q:L4Formula> => Formula::Impl(Box::new(p), Box::new(q)),
    <p:L3Formula> => p,
}

// Associates to the right
L3Formula: Formula = {
    <p:L2Formula> "\\/" <q:L3Formula> => Formula::Or(Box::new(p), Box::new(q)),
    <p:L2Formula> => p,
}

// Associates to the right
L2Formula: Formula = {
    <p:L1Formula> "/\\" <q:L2Formula> => Formula::And(Box::new(p), Box::new(q)),
    <p:L1Formula> => p,
}

L1Formula: Formula = {
    "~" <p:L0Formula> => Formula::Not(Box::new(p)),
    <p:L0Formula> => p,
}

L0Formula: Formula = {
    <a:Atom> => Formula::Atom(Box::new(a)),
    "(" <p:Formula> ")" => p,
}
